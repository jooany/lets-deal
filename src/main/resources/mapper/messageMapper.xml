<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jooany.letsdeal.repository.mapper.MessageMapper">

    <select id="findAllMessageGroupByUserId" parameterType="map"
            resultType="com.jooany.letsdeal.controller.dto.response.MessageGroupRes">
        SELECT mg.id
             , mg.sale_id
             , s.title
             , i.image_url AS thumbnail_image_url
             , CASE WHEN s.deleted_at IS NULL THEN FALSE
                    ELSE TRUE
                END AS was_sale_deleted
             , CASE WHEN mg.buyer_id != #{userId} THEN u1.id
                    ELSE u2.id
                END AS opponent_id
             , CASE WHEN mg.buyer_id != #{userId} THEN u1.user_name
        	        ELSE u2.user_name
        	    END AS opponent_name
             , m1.message_content AS last_message_content
             , m1.registered_at AS last_message_registered_at
             , ( SELECT COUNT(m.id)
                   FROM messages m
                  WHERE sender_id = #{userId}
                    AND was_read_by_sender = FALSE
                    AND m.message_group_id = mg.id
                ) AS unread_message_count
             , mg.registered_at
          FROM message_group mg
         INNER JOIN sales s
            ON mg.sale_id = s.id
          LEFT JOIN image i
            ON s.id = i.sale_id
           AND i.sort_order = 1
         INNER JOIN "user" AS u1
         	ON u1.id = mg.buyer_id
         INNER JOIN "user" AS u2
         	ON u2.id = s.user_id
          LEFT JOIN messages AS m1
            ON mg.id = m1.message_group_id
           AND m1.registered_at = (
              SELECT MAX(registered_at)
                FROM messages m2
               WHERE mg.id = m2.message_group_id
           )
         WHERE (u1.id = #{userId} OR u2.id = #{userId})
           AND (mg.deleted_by != #{userId} OR mg.deleted_by IS NULL)
         ORDER BY mg.registered_at DESC
         LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="getCountMessageGroupByUserId" parameterType="Long"
                resultType="Integer">
            SELECT COUNT(mg.id)
              FROM message_group mg
             INNER JOIN sales s
                ON mg.sale_id = s.id
             INNER JOIN "user" AS u1
                ON u1.id = mg.buyer_id
             INNER JOIN "user" AS u2
                ON u2.id = s.user_id
             WHERE (u1.id = #{userId} OR u2.id = #{userId})
               AND (mg.deleted_by != #{userId} OR mg.deleted_by IS NULL)
    </select>

    <select id="findAllMessageByMessageGroupId" parameterType="map"
            resultType="com.jooany.letsdeal.controller.dto.response.MessageRes">
        SELECT m.id
        	 , m.message_content
        	 , CASE WHEN u.id IS NULL THEN FALSE
        	   	 	ELSE TRUE
        	   	END AS is_sender
        	 , m.was_read_by_sender
        	 , m.registered_at
          FROM messages m
         INNER JOIN message_group mg
         	ON mg.id = m.message_group_id
         INNER JOIN sales s
            ON s.id = mg.sale_id
          LEFT JOIN "user" u
         	ON u.id = m.sender_id
           AND u.id = #{userId}
         WHERE m.message_group_id = #{messageGroupId}
           AND (m.deleted_by != #{userId} OR m.deleted_by IS NULL)
         ORDER BY registered_at ASC
    </select>

    <select id="checkOpponentWithdrawn" parameterType="Long"
            resultType="Boolean">
        SELECT EXISTS (
        				SELECT u.id
        				  FROM "user" u
        				 WHERE u.id = #{opponentId}
        				   AND u.deleted_at IS NOT NULL
        			  ) is_opponent_not_withdrawn
    </select>

    <update id="updateUnreadToRead" parameterType="map">
        UPDATE messages
           SET was_read_by_sender = TRUE
         WHERE sender_id = #{userId}
           AND message_group_id  = #{messageGroupId}
           AND was_read_by_sender = FALSE
    </update>

    <select id="checkPermissionToRead" parameterType="map"
            resultType="Boolean">
        SELECT EXISTS (
        				SELECT mg.id
        				  FROM message_group mg
        				 INNER JOIN sales s
        				 	ON s.id = mg.sale_id
        				 INNER JOIN "user" seller
        				    ON seller.id = s.user_id
        				 INNER JOIN "user" u
        				 	ON u.id = #{userId}
        				 WHERE (seller.id = #{userId}
        				    OR mg.buyer_id = #{userId}
        				    OR u.user_role = 'ADMIN')
                           AND mg.id = #{messageGroupId}
        			    );
    </select>
</mapper>