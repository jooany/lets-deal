<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jooany.letsdeal.repository.mapper.MessageMapper">

    <select id="findAllMessageGroupByUserId" parameterType="map"
            resultType="com.jooany.letsdeal.controller.dto.response.MessageGroupRes">
        SELECT mg.id
             , mg.sale_id
             , s.title
             , i.image_url AS thumbnail_image_url
             , s.sale_status
             , CASE WHEN s.deleted_at IS NULL THEN FALSE
                    ELSE TRUE
                END AS was_sale_deleted
             , CASE WHEN mg.buyer_id != #{userId} THEN u1.id
                    ELSE u2.id
                END AS opponent_id
             , CASE WHEN mg.buyer_id != #{userId} THEN u1.nickname
        	        ELSE u2.nickname
        	    END AS opponent_nickname
             , m1.message_content AS last_message_content
             , m1.registered_at AS last_message_registered_at
             , ( SELECT COUNT(m.id)
                   FROM messages m
                  WHERE sender_id = #{userId}
                    AND was_read_by_sender = FALSE
                    AND m.message_group_id = mg.id
                ) AS unread_message_count
             , mg.registered_at
          FROM message_group mg
         INNER JOIN sales s
            ON mg.sale_id = s.id
          LEFT JOIN image i
            ON s.id = i.sale_id
           AND i.sort_order = 1
         INNER JOIN "user" AS u1
         	ON u1.id = mg.buyer_id
         INNER JOIN "user" AS u2
         	ON u2.id = s.user_id
          LEFT JOIN messages AS m1
            ON mg.id = m1.message_group_id
           AND m1.registered_at = (
              SELECT MAX(registered_at)
                FROM messages m2
               WHERE mg.id = m2.message_group_id
           )
         WHERE (u1.id = #{userId} OR u2.id = #{userId})
           AND (mg.deleted_by != #{userId} OR mg.deleted_by IS NULL)
         ORDER BY mg.registered_at DESC
         LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="getCountMessageGroupByUserId" parameterType="Long"
                resultType="Integer">
            SELECT COUNT(mg.id)
              FROM message_group mg
             INNER JOIN sales s
                ON mg.sale_id = s.id
             INNER JOIN "user" AS u1
                ON u1.id = mg.buyer_id
             INNER JOIN "user" AS u2
                ON u2.id = s.user_id
             WHERE (u1.id = #{userId} OR u2.id = #{userId})
               AND (mg.deleted_by != #{userId} OR mg.deleted_by IS NULL)
    </select>

    <select id="findAllMessageByMessageGroupId" parameterType="map"
            resultType="com.jooany.letsdeal.controller.dto.response.MessageRes">
        SELECT m.id
        	 , m.message_content
        	 , CASE WHEN u.id IS NULL THEN FALSE
        	   	 	ELSE TRUE
        	   	END AS is_sender
        	 , m.was_read_by_sender
        	 , m.registered_at
          FROM messages m
         INNER JOIN message_group mg
         	ON mg.id = m.message_group_id
         INNER JOIN sales s
            ON s.id = mg.sale_id
          LEFT JOIN "user" u
         	ON u.id = m.sender_id
           AND u.id = #{userId}
         WHERE m.message_group_id = #{messageGroupId}
           AND (m.deleted_by != #{userId} OR m.deleted_by IS NULL)
         ORDER BY registered_at ASC
    </select>

    <select id="checkOpponentWithdrawn" parameterType="Long"
            resultType="Boolean">
        SELECT EXISTS (
        				SELECT u.id
        				  FROM "user" u
        				 WHERE u.id = #{opponentId}
        				   AND u.deleted_at IS NOT NULL
        			  ) is_opponent_withdrawn
    </select>

    <update id="updateUnreadToRead" parameterType="map">
        UPDATE messages
           SET was_read_by_sender = TRUE
         WHERE sender_id = #{userId}
           AND message_group_id  = #{messageGroupId}
           AND was_read_by_sender = FALSE
    </update>

    <select id="checkPermissionToRead" parameterType="map"
            resultType="Boolean">
        SELECT EXISTS (
        				SELECT mg.id
        				  FROM message_group mg
        				 INNER JOIN sales s
        				 	ON s.id = mg.sale_id
        				 INNER JOIN "user" seller
        				    ON seller.id = s.user_id
        				 INNER JOIN "user" u
        				 	ON u.id = #{userId}
        				 WHERE (seller.id = #{userId}
        				    OR mg.buyer_id = #{userId}
        				    OR u.user_role = 'ADMIN')
                           AND mg.id = #{messageGroupId}
        			    );
    </select>

    <select id="findGroupIdWhenIsSeller" parameterType="com.jooany.letsdeal.controller.dto.request.MessageSendReq"
            resultType="Long">
        SELECT mg.id
          FROM message_group mg
         INNER JOIN sales s
            ON s.id = mg.sale_id
           AND s.id = #{saleId}
         INNER JOIN "user" u1
            ON u1.id = #{userId}
         INNER JOIN "user" u2
            ON u2.id = #{opponentId}
         WHERE u1.id = s.user_id
           AND u2.id = mg.buyer_id
    </select>

    <select id="findGroupIdWhenIsBuyer" parameterType="com.jooany.letsdeal.controller.dto.request.MessageSendReq"
            resultType="Long">
        SELECT mg.id
          FROM message_group mg
         INNER JOIN sales s
            ON s.id = mg.sale_id
           AND s.id = #{saleId}
         INNER JOIN "user" u1
            ON u1.id = #{userId}
         INNER JOIN "user" u2
            ON u2.id = #{opponentId}
         WHERE u2.id = s.user_id
           AND u1.id = mg.buyer_id
    </select>

    <insert id="saveMessageGroupWhenIsSeller" parameterType="com.jooany.letsdeal.controller.dto.request.MessageSendReq">
        INSERT
          INTO message_group
        	 ( sale_id
        	 , buyer_id
             , registered_at
        	 )
        VALUES
        	 ( #{saleId}
        	 , #{opponentId}
             , now()
        	 );
    </insert>

    <insert id="saveMessageGroupWhenIsBuyer" parameterType="com.jooany.letsdeal.controller.dto.request.MessageSendReq">
        INSERT
          INTO message_group
        	 ( sale_id
        	 , buyer_id
        	 , registered_at
        	 )
        VALUES
        	 ( #{saleId}
        	 , #{userId}
        	 , now()
        	 );
    </insert>

    <update id="updateGroupDeleteToNull" parameterType="Long">
        UPDATE message_group
           SET deleted_by = NULL
             , deleted_at = NULL
         WHERE id = #{messageGroupId}
    </update>

    <insert id="saveMessage" parameterType="com.jooany.letsdeal.controller.dto.request.MessageSendReq">
        INSERT
          INTO messages
        	 ( message_group_id
        	 , receiver_id
        	 , sender_id
        	 , message_content
        	 , was_read_by_sender
        	 , registered_at
        	 )
        VALUES
        	 ( #{messageGroupId}
        	 , #{userId}
        	 , #{opponentId}
        	 , #{messageContent}
        	 , FALSE
        	 , now()
        	 );
    </insert>

    <!-- 메시지 삭제 -->
    <select id="checkHasUndeletedMessage" parameterType="Long"
            resultType="Boolean">
        SELECT EXISTS (
        	   SELECT id
        	     FROM messages
        	    WHERE message_group_id = #{messageGroupId}
        ) AS hasUndeletedMessage
    </select>

    <select id="checkHasUnreadMessage" parameterType="com.jooany.letsdeal.controller.dto.request.MessageAllDeleteReq"
            resultType="Boolean">
        SELECT EXISTS (
        	   SELECT id
        	     FROM messages
        	    WHERE was_read_by_sender = FALSE
        	      AND sender_id = #{userId}
        	      AND message_group_id = #{messageGroupId}
        ) AS hasUnreadMessage
    </select>

    <delete id="deleteMessagesByIds" parameterType="com.jooany.letsdeal.controller.dto.request.MessageAllDeleteReq">
        DELETE
          FROM messages
        	<where>
                id IN
                <foreach collection="messageIds" item="item" index="i" open="(" separator="," close=")">
        		    #{item}
        		</foreach>
                AND deleted_by = #{opponentId}
        	</where>
    </delete>

    <delete id="deleteMessageGroupById" parameterType="Long">
        DELETE
          FROM message_group
         WHERE id = #{messageGroupId}
    </delete>

    <update id="updateMessageGroupToDeleteById" parameterType="com.jooany.letsdeal.controller.dto.request.MessageAllDeleteReq">
        UPDATE message_group
           SET deleted_by = #{userId}
             , deleted_at = now()
         WHERE id = #{messageGroupId}
           AND deleted_by IS NULL
           AND deleted_at IS NULL
    </update>

    <update id="updateMessagesToDeleteByIds" parameterType="com.jooany.letsdeal.controller.dto.request.MessageAllDeleteReq">
        UPDATE messages
           SET deleted_by = #{userId}
             , deleted_at = now()
        <where>
               id IN
                    <foreach collection="messageIds" item="item" index="i" open="(" separator="," close=")">
       		            #{item}
       		        </foreach>
               AND message_group_id = #{messageGroupId}
               AND deleted_by IS NULL
               AND deleted_at IS NULL
        </where>
    </update>

    <!-- 사용자 회원탈퇴 시, 메시지 SOFT&HARD Delete -->

    <update id="updateMessagesToDeleteByUserId" parameterType="Long">
        UPDATE messages
           SET deleted_by = #{userId}
             , deleted_at = now()
         WHERE ( receiver_id = #{userId} OR sender_id = #{userId} )
           AND deleted_by IS NULL
    </update>

    <update id="updateMessageGroupToDeleteByUserId" parameterType="Long">
        UPDATE message_group mg
           SET deleted_by = #{userId}
             , deleted_at = now()
          FROM (
          		SELECT id, user_id FROM sales) s
         WHERE s.id = mg.sale_id
           AND ( s.user_id = #{userId} OR mg.buyer_id = #{userId} )
           AND deleted_by IS NULL

    </update>

    <delete id="deleteMessagesByUserId" parameterType="Long">
        DELETE
          FROM messages
         WHERE ( receiver_id = #{userId} OR sender_id = #{userId} )
           AND deleted_by IS NOT NULL AND deleted_by != #{userId}

    </delete>

    <delete id="deleteMessageGroupByUserId" parameterType="Long">
        DELETE
          FROM message_group mg
         USING sales s
         WHERE s.id = mg.sale_id
           AND ( s.user_id = #{userId} OR mg.buyer_id = #{userId} )
           AND deleted_by IS NOT NULL AND deleted_by != #{userId}
    </delete>

</mapper>